{"version":3,"sources":["../src/mcp/index.ts"],"names":["Server","CallToolRequestSchema","ListToolsRequestSchema","z","zodToJsonSchema","server","request","REGISTRY_URL","registry","getRegistry","style","item","text","rules","getRegistryItemUrl","name","itemUrl","getRegistryItem","error","registryUrl","registryJson","fetchRegistry","registrySchema","itemName"],"mappings":"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","sourcesContent":["import { registrySchema } from \"@/src/registry\"\nimport { fetchRegistry, getRegistryItem } from \"@/src/registry/api\"\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\"\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\"\nimport { z } from \"zod\"\nimport { zodToJsonSchema } from \"zod-to-json-schema\"\n\nexport const server = new Server(\n  {\n    name: \"shadcn\",\n    version: \"0.0.1\",\n  },\n  {\n    capabilities: {\n      resources: {},\n      tools: {},\n    },\n  }\n)\n\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: [\n      {\n        name: \"init\",\n        description:\n          \"Initialize a new project using a registry style project structure.\",\n        inputSchema: zodToJsonSchema(z.object({})),\n      },\n      {\n        name: \"get_items\",\n        description: \"List all the available items in the registry\",\n        inputSchema: zodToJsonSchema(z.object({})),\n      },\n      {\n        name: \"get_item\",\n        description: \"Get an item from the registry\",\n        inputSchema: zodToJsonSchema(\n          z.object({\n            name: z\n              .string()\n              .describe(\n                \"The name of the item to get from the registry. This is required.\"\n              ),\n          })\n        ),\n      },\n      {\n        name: \"add_item\",\n        description: \"Add an item from the registry\",\n        inputSchema: zodToJsonSchema(\n          z.object({\n            name: z\n              .string()\n              .describe(\n                \"The name of the item to add to the registry. This is required.\"\n              ),\n          })\n        ),\n      },\n    ],\n  }\n})\n\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\n  try {\n    if (!request.params.arguments) {\n      throw new Error(\"Arguments are required\")\n    }\n\n    const REGISTRY_URL = process.env.REGISTRY_URL\n\n    if (!REGISTRY_URL) {\n      throw new Error(\"REGISTRY_URL is not set\")\n    }\n\n    switch (request.params.name) {\n      case \"init\": {\n        const registry = await getRegistry(REGISTRY_URL)\n        const style = registry.items.find(\n          (item) => item.type === \"registry:style\"\n        )\n\n        let text = `To initialize a new project, run the following command:\n                \\`\\`\\`bash\n                npx shadcn@canary init\n                \\`\\`\\`\n                - This will install all the dependencies and theme for the project.\n                - If running the init command installs a rules i.e registry.mdc file, you should follow the instructions in the file to configure the project.\n                `\n\n        const rules = registry.items.find(\n          (item) => item.type === \"registry:file\" && item.name === \"rules\"\n        )\n\n        if (rules) {\n          text += `\n                You should also install the rules for the project.\n                \\`\\`\\`bash\n                npx shadcn@canary add ${getRegistryItemUrl(\n                  rules.name,\n                  REGISTRY_URL\n                )}\n                \\`\\`\\`\n                `\n        }\n\n        if (!style) {\n          return {\n            content: [\n              {\n                type: \"text\",\n                text,\n              },\n            ],\n          }\n        }\n\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `To initialize a new project using the ${\n                style.name\n              } style, run the following command:\n              \\`\\`\\`bash\n              npx shadcn@canary init ${getRegistryItemUrl(\n                style.name,\n                REGISTRY_URL\n              )}\n              \\`\\`\\`\n              `,\n            },\n          ],\n        }\n      }\n      case \"get_items\": {\n        const registry = await getRegistry(REGISTRY_URL)\n\n        if (!registry.items) {\n          return {\n            content: [\n              {\n                type: \"text\",\n                text: \"No items found in the registry\",\n              },\n            ],\n          }\n        }\n\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `The following items are available in the registry:\n              ${JSON.stringify(\n                registry.items.map(\n                  (item) => `- ${item.name} (${item.type}): ${item.description}`\n                ),\n                null,\n                2\n              )}.\n              - To install and use an item in your project, you run the following command:\n              \\`\\`\\`bash\n              npx shadcn@canary add ${getRegistryItemUrl(\n                \"NAME_OF_THE_ITEM\",\n                REGISTRY_URL\n              )}\n              \\`\\`\\`\n                - Example: npx shadcn@canary add ${getRegistryItemUrl(\n                  registry.items[0].name,\n                  REGISTRY_URL\n                )} to install the ${registry.items[0].name} item.\n                - To install multiple registry.items, you can do the following:\n                \\`\\`\\`bash\n                npx shadcn@canary add ${getRegistryItemUrl(\n                  \"NAME_OF_THE_ITEM_1\",\n                  REGISTRY_URL\n                )} ${getRegistryItemUrl(\"NAME_OF_THE_ITEM_2\", REGISTRY_URL)}\n                \\`\\`\\`\n                - Before using any item, you need to add it first.\n                - Adding the items will install all dependencies for the item and format the code as per the project.\n              - Example components should not be installed directly unless asked. These components should be used as a reference to build other components.\n              `,\n            },\n          ],\n        }\n      }\n\n      case \"get_item\": {\n        const name = z.string().parse(request.params.arguments.name)\n\n        if (!name) {\n          throw new Error(\"Name is required\")\n        }\n\n        const itemUrl = getRegistryItemUrl(name, REGISTRY_URL)\n        const item = await getRegistryItem(itemUrl, \"\")\n\n        return {\n          content: [{ type: \"text\", text: JSON.stringify(item, null, 2) }],\n        }\n      }\n\n      case \"add_item\": {\n        const name = z.string().parse(request.params.arguments.name)\n\n        if (!name) {\n          throw new Error(\"Name is required\")\n        }\n\n        const itemUrl = getRegistryItemUrl(name, REGISTRY_URL)\n        const item = await getRegistryItem(itemUrl, \"\")\n\n        if (!item) {\n          return {\n            content: [\n              {\n                type: \"text\",\n                text: `Item ${name} not found in the registry.`,\n              },\n            ],\n          }\n        }\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `To install the ${name} item, run the following command:\n              \\`\\`\\`bash\n              npx shadcn@canary add ${itemUrl}\n              \\`\\`\\``,\n            },\n          ],\n        }\n      }\n      default:\n        throw new Error(`Tool ${request.params.name} not found`)\n    }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(`Invalid input: ${JSON.stringify(error.errors)}`)\n    }\n\n    throw error\n  }\n})\n\nasync function getRegistry(registryUrl: string) {\n  const [registryJson] = await fetchRegistry([registryUrl], {\n    useCache: false,\n  })\n  return registrySchema.parse(registryJson)\n}\n\nfunction getRegistryItemUrl(itemName: string, registryUrl: string) {\n  const registryBaseUrl = registryUrl.replace(/\\/registry\\.json$/, \"\")\n  return `${registryBaseUrl}/${itemName}.json`\n}\n"]}